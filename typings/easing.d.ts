type EasingFunction = (value: number) => number;

interface Math {
    backEaseIn: EasingFunction,
    backEaseInOut: EasingFunction,
    backEaseOut: EasingFunction,
    bounceEaseIn: EasingFunction,
    bounceEaseInOut: EasingFunction,
    bounceEaseOut: EasingFunction,
    circularEaseIn: EasingFunction,
    circularEaseInOut: EasingFunction,
    circularEaseOut: EasingFunction,
    cubicEaseIn: EasingFunction,
    cubicEaseInOut: EasingFunction,
    cubicEaseOut: EasingFunction,
    elasticEaseIn: EasingFunction,
    elasticEaseInOut: EasingFunction,
    elasticEaseOut: EasingFunction,
    exponentialEaseIn: EasingFunction,
    exponentialEaseInOut: EasingFunction,
    exponentialEaseOut: EasingFunction,
    quadEaseIn: EasingFunction,
    quadEaseInOut: EasingFunction,
    quadEaseOut: EasingFunction,
    quartEaseIn: EasingFunction,
    quartEaseInOut: EasingFunction,
    quartEaseOut: EasingFunction,
    quintEaseIn: EasingFunction,
    quintEaseInOut: EasingFunction,
    quintEaseOut: EasingFunction,
    sineEaseIn: EasingFunction,
    sineEaseInOut: EasingFunction,
    sineEaseOut: EasingFunction
}
